# vim:ts=2:sw=2:et:ai:sts=2
---
# =============================================================================
# Simple network configuration templates and defaults.
# =============================================================================

# To use these templates:
#
# net__enable: true
# net__use_udev_persistent_rules: true
# net__interfaces: '{{ netconfig__interfaces }}'

# Configuration variables.
# -----------------------------------------------------------------------------

# Public interface configuration.
pubnet_iface: ~
pubnet_hwaddr: ~

## IPv4 configuration.
pubnet_host: ~
pubnet_mask: 24
pubnet_gwidx: ~
pubnet_gw: |-
  {{
    (
      ('%s/%d' % (pubnet_host, pubnet_mask)) |
      ansible.utils.ipv4('network/prefix') |
      ansible.utils.ipv4(pubnet_gwidx) |
      ansible.utils.ipv4('address')
    )
    if pubnet_host and pubnet_mask and pubnet_gwidx else None
  }}
pubnet_routed_nets: []
pubnet_config_override: ~

## IPv6 configuration.
pubnet6_host: ~
pubnet6_mask: 64
pubnet6_gwidx: ~
pubnet6_gw: |-
  {{
    (
      ('%s/%d' % (pubnet6_host, pubnet6_mask)) |
      ansible.utils.ipv6('network/prefix') |
      ansible.utils.ipv6(pubnet6_gwidx) |
      ansible.utils.ipv6('address')
    )
    if pubnet6_host and pubnet6_mask and pubnet6_gwidx else None
  }}
pubnet6_routed_nets: []
pubnet6_config_override: ~

# Private interface configuration.
privnet_iface: ~
privnet_hwaddr: ~

## IPv4 configuration.
privnet_host: ~
privnet_mask: 24
privnet_gwidx: ~
privnet_gw: |-
  {{
    (
      ('%s/%d' % (privnet_host, privnet_mask)) |
      ansible.utils.ipv4('network/prefix') |
      ansible.utils.ipv4(privnet_gwidx) |
      ansible.utils.ipv4('address')
    )
    if privnet_host and privnet_mask and privnet_gwidx else None
  }}
privnet_routed_nets: []
privnet_config_override: ~

## IPv6 configuration.
privnet6_host: ~
privnet6_mask: 64
privnet6_gwidx: ~
privnet6_gw: |-
  {{
    (
      ('%s/%d' % (privnet6_host, privnet6_mask)) |
      ansible.utils.ipv6('network/prefix') |
      ansible.utils.ipv6(privnet6_gwidx) |
      ansible.utils.ipv6('address')
    )
    if privnet6_host and privnet6_mask and privnet6_gwidx else None
  }}
privnet6_routed_nets: []
privnet6_config_override: ~

# Templates.
# -----------------------------------------------------------------------------

netconfig__interfaces: |-
  {{
    _netconfig__interfaces |
    combine({
      pubnet_iface: {'config': {'inet': pubnet_config_override}},
    } if pubnet_iface and pubnet_config_override else {}, recursive=True) |
    combine({
      pubnet_iface: {'config': {'inet6': pubnet6_config_override}},
    } if pubnet_iface and pubnet6_config_override else {}, recursive=True) |
    combine({
      privnet_iface: {'config': {'inet': privnet_config_override}},
    } if privnet_iface and privnet_config_override else {}, recursive=True) |
    combine({
      privnet_iface: {'config': {'inet6': privnet6_config_override}},
    } if privnet_iface and privnet6_config_override else {}, recursive=True)
  }}

_netconfig__interfaces: |-
  {% filter from_yaml %}
  {% if pubnet_iface %}
  {% set pubnet_net = '%s/%s' % (pubnet_host, pubnet_mask) %}
  {{ pubnet_iface }}:
    allow: auto
  {% if pubnet_hwaddr %}
    udev_persistent_rule:
      address: '{{ pubnet_hwaddr }}'
  {% endif %}
    config:

  {% if pubnet_host %}
      inet:
        method: static
        address: '{{ pubnet_net }}'
        gateway: '{{ pubnet_gw or None }}'
  {% if pubnet_gw and
    not (pubnet_net | ansible.utils.network_in_network(pubnet_gw)) %}
        pointopoint: '{{ pubnet_gw }}'
  {% endif %}
        pre-up: /sbin/ip addr flush dev $IFACE || true
  {% if pubnet_routed_nets %}
        up:
  {% for net, gw in pubnet_routed_nets %}
          - ip route add {{ net }} via {{ gw }} dev $IFACE
  {% endfor %}
        down:
  {% for net, gw in pubnet_routed_nets %}
          - ip route del {{ net }} via {{ gw }} dev $IFACE
  {% endfor %}
  {% endif %}
  {% endif %}

  {% if pubnet6_host %}
      inet6:
        method: static
        address: '{{ pubnet6_host }}/{{ pubnet6_mask }}'
        gateway: '{{ pubnet6_gw or None }}'
        autoconf: 0
        accept_ra: 0
  {% if pubnet6_routed_nets %}
        up:
  {% for net, gw in pubnet6_routed_nets %}
          - ip route add {{ net }} via {{ gw }} dev $IFACE
  {% endfor %}
        down:
  {% for net, gw in pubnet6_routed_nets %}
          - ip route del {{ net }} via {{ gw }} dev $IFACE
  {% endfor %}
  {% endif %}
  {% endif %}
  {% endif %}

  {% if privnet_iface %}
  {% set privnet_net = '%s/%s' % (privnet_host, privnet_mask) %}
  {{ privnet_iface }}:
    allow: auto
  {% if privnet_hwaddr %}
    udev_persistent_rule:
      address: '{{ privnet_hwaddr }}'
  {% endif %}
    config:

  {% if privnet_host %}
      inet:
        method: static
        address: '{{ privnet_net }}'
        gateway: '{{ privnet_gw or None }}'
  {% if privnet_gw and
    not (privnet_net | ansible.utils.network_in_network(privnet_gw)) %}
        pointopoint: '{{ privnet_gw }}'
  {% endif %}
        pre-up: /sbin/ip addr flush dev $IFACE || true
  {% if privnet_routed_nets %}
        up:
  {% for net, gw in privnet_routed_nets %}
          - ip route add {{ net }} via {{ gw }} dev $IFACE
  {% endfor %}
        down:
  {% for net, gw in privnet_routed_nets %}
          - ip route del {{ net }} via {{ gw }} dev $IFACE
  {% endfor %}
  {% endif %}
  {% endif %}

  {% if privnet6_host %}
      inet6:
        method: static
        address: '{{ privnet6_host }}/{{ privnet6_mask }}'
        gateway: '{{ privnet6_gw or None}}'
        autoconf: 0
        accept_ra: 0
  {% if privnet6_routed_nets %}
        up:
  {% for net, gw in privnet6_routed_nets %}
          - ip route add {{ net }} via {{ gw }} dev $IFACE
  {% endfor %}
        down:
  {% for net, gw in privnet6_routed_nets %}
          - ip route del {{ net }} via {{ gw }} dev $IFACE
  {% endfor %}
  {% endif %}
  {% endif %}
  {% endif %}
  {% endfilter %}
