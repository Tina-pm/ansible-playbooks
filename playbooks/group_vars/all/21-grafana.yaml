# vim:ts=2:sw=2:et:ai:sts=2

# Role: Install and configure grafana
---

grafana__enable: false

grafana__install_ferm_svc: '{{ ferm__enable | bool }}'
grafana__ferm_allow_from: '{{ internal_networks }}'

grafana__server__domain: monitoring.{{ domain_name }}
grafana__smtp__from_address: grafana@{{ host_fqdn }}

grafana__auth_anonymous__enabled: false
grafana__auth_ldap__enabled: '{{ _grafana_use_ldap }}'
grafana__auth_basic__enabled: '{{ not _grafana_use_ldap }}'

# Use LDAP if GLAuth is enabled.
_grafana_use_ldap: '{{ glauth__enable | d() | bool }}'
# Avoid errors.
_grafana_ldap_svc: '{{ (glauth__service_ldap | d()) or {} }}'
_grafana_ldaps_svc: '{{ (glauth__service_ldaps | d()) or {} }}'
# Use LDAPs if available.
_grafana_ldap_use_ldaps: '{{ _grafana_ldaps_svc.get("enabled") }}'
# Find bind address.
_grafana_ldap_listen: |-
  {{
    (
      _grafana_ldaps_svc if _grafana_ldap_use_ldaps else
      _grafana_ldap_svc
    ).get('listen') |
    mandatory(msg='Missing listen parameter in GLAuth configuration')
  }}
grafana__ldap__servers__host: '{{ _grafana_ldap_listen.split(":")[0] }}'
grafana__ldap__servers__port: '{{ _grafana_ldap_listen.split(":")[1] }}'
grafana__ldap__servers__use_ssl: '{{ _grafana_ldap_use_ldaps }}'
grafana__ldap__servers__start_tls: '{{
  not _grafana_ldap_use_ldaps or _grafana_ldap_svc.get("tls") }}'
grafana__ldap__servers__ssl_skip_verify: false
grafana__ldap__servers__bind_dn:
