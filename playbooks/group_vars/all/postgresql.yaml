# vim:ts=2:sw=2:et:ai:sts=2
---
# =============================================================================
# Reusable defaults and templates for postgresql and postgresql_objects roles.
# =============================================================================

postgresql__enable: false
postgresql__install_ferm_svc: '{{ ferm__enable | bool }}'
postgresql__ferm_allow_from: '{{ trusted_networks }}'
postgresql__ferm_allow_ports: 5432

postgresql_flavor: apt
postgresql_install_psycopg2: true

# Allow replication connections from localhost, by a user with the
# replication privilege.
postgresql_pg_hba_conf_allow_local_replication: true

# Allow connections from all users to all databases from the specified networks.
postgresql_pg_hba_conf_allow_all_from: '{{ trusted_networks }}'

# Allow creating users and databases and granting access with a simple
# configuration.
# postgresql__simple_setup__mydb:
#   - db: mydb
#     user: myuser
#     password: s3cret
#     extensions: [postgis]
#     allowed_hosts: [appserver]

# Implementation of custom templates
# -----------------------------------------------------------------------------

postgresql_pg_hba_conf__00_auto: |-
  {{
    (_postgresql_pg_hba_conf_replication if
      postgresql_pg_hba_conf_allow_local_replication else []) +
    (_postgresql_pg_hba_conf_allow_all_from if
      postgresql_pg_hba_conf_allow_all_from else [])
  }}

_postgresql_pg_hba_conf_replication:
 - local replication all peer
 - host replication all 127.0.0.1/32 {{ postgresql_default_auth_method }}
 - host replication all ::1/128 {{ postgresql_default_auth_method }}
_postgresql_pg_hba_conf_allow_all_from: |-
  {% filter from_yaml_all %}
  {% for net in postgresql_pg_hba_conf_allow_all_from %}
  {{ 'host all all %s %s' | format(net, postgresql_default_auth_method) |
    to_yaml(explicit_start=True) }}
  {% endfor %}
  {% endfilter %}

postgresql_pg_hba_conf__01_simple: |-
  {% filter from_yaml_all %}
  {% for conf in postgresql__simple_setup %}
  {% for host in conf.get('allowed_hosts') or [] %}
  {% for vname, mask in (('privnet_host', 32), ('privnet6_host', 128)) %}
  {% set addr = hostvars[host][vname] | d() %}
  {% if addr %}
  {{
    'host %s %s %s/%d %s' |
    format(conf.user, conf.db, addr, mask, postgresql_default_auth_method) |
    to_yaml(explicit_start=True)
  }}
  {% endif %}
  {% endfor %}
  {% endfor %}
  {% endfor %}
  {% endfilter %}

postgresql_objects_users__01_simple: |-
  {% filter from_yaml_all %}
  {% for conf in postgresql__simple_setup %}
  {{
    dict(name=conf.user, password=conf.password) |
    to_yaml(explicit_start=True)
  }}
  {% endfor %}
  {% endfilter %}

postgresql_objects_databases__01_simple: |-
  {% filter from_yaml_all %}
  {% for conf in postgresql__simple_setup %}
  {{ dict(name=conf.db, owner=conf.user) | to_yaml(explicit_start=True) }}
  {% endfor %}
  {% endfilter %}

postgresql_objects_extensions__01_simple: |-
  {% filter from_yaml_all %}
  {% for conf in postgresql__simple_setup %}
  {% for ext in conf.get('extensions') or [] %}
  {{ dict(database=conf.db, name=ext) | to_yaml(explicit_start=True) }}
  {% endfor %}
  {% endfor %}
  {% endfilter %}

# Agregation of custom configuration using var prefixes
# -----------------------------------------------------------------------------

postgresql_install_extra: |-
  {{
    query('vars',
      *(query('varnames', '^postgresql_install_extra__.*') | sort)
    ) | sum(start=[])
  }}

postgresql_conf: |-
  {{
    {} | combine(
      *query('vars',
        *(query('varnames', '^postgresql_conf__.*') | sort)
      )
    )
  }}

postgresql_pg_hba_conf: |-
  {{
    query('vars',
      *(query('varnames', '^postgresql_pg_hba_conf__.*') | sort)
    ) | sum(start=[])
  }}

postgresql_objects_users: |-
  {{
    query('vars',
      *(query('varnames', '^postgresql_objects_users__.*') | sort)
    ) | sum(start=[])
  }}

postgresql_objects_groups: |-
  {{
    query('vars',
      *(query('varnames', '^postgresql_objects_groups__.*') | sort)
    ) | sum(start=[])
  }}

postgresql_objects_databases: |-
  {{
    query('vars',
      *(query('varnames', '^postgresql_objects_databases__.*') | sort)
    ) | sum(start=[])
  }}

postgresql_objects_schemas: |-
  {{
    query('vars',
      *(query('varnames', '^postgresql_objects_schemas__.*') | sort)
    ) | sum(start=[])
  }}

postgresql_objects_extensions: |-
  {{
    query('vars',
      *(query('varnames', '^postgresql_objects_extensions__.*') | sort)
    ) | sum(start=[])
  }}

postgresql_objects_privileges: |-
  {{
    query('vars',
      *(query('varnames', '^postgresql_objects_privileges__.*') | sort)
    ) | sum(start=[])
  }}

postgresql_objects_queries: |-
  {{
    query('vars',
      *(query('varnames', '^postgresql_objects_queries__.*') | sort)
    ) | sum(start=[])
  }}

postgresql__simple_setup: |-
  {{
    query('vars',
      *(query('varnames', '^postgresql__simple_setup__.*') | sort)
    ) | sum(start=[])
  }}
